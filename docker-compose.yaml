version: "3.6"
services:
  ###### Traefik ######
  traefik:
    command:
      - "traefik"
      - "--providers.file=true"
      - "--providers.file.filename=/etc/traefik/rules.toml"
      - "--providers.file.watch=true"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.email=${CERT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--metrics"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=traefik"
      - "--metrics.prometheus.buckets=${PROMETHEUS_BUCKETS}"
    container_name: "traefik"
    image: "traefik:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.api.entrypoints: "websecure"
      traefik.http.routers.api.rule: "Host(`${TRAEFIK_TRAEFIK_HOST}`)"
      traefik.http.routers.api.service: "api@internal"
      traefik.http.routers.api.tls.certresolver: "myresolver"
      traefik.http.routers.api.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    ports:
      - "443:443/tcp"
      - "80:80/tcp"
      - "8080:8080/tcp"
    restart: "unless-stopped"
    environment:
      - "TZ=${TZ}"
    volumes:
      - "/etc/traefik/rules.yml:${CONFIG_PATH}/traefik/rules.yml"
      - "${CONFIG_PATH}/letsencrypt:/letsencrypt"
      - "${CONFIG_PATH}/traefik/rules.toml:/etc/traefik/rules.toml"
      - "/var/run/docker.sock:/var/run/docker.sock"

  ###### Prometheus ######
  prometheus:
    container_name: "prometheus"
    image: prom/prometheus
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    ports:
      - "9090:9090"
    volumes:
      - ${CONFIG_PATH}/prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    network_mode: "bridge"
    labels:
      traefik.enable: "true"
      traefik.http.routers.prometheus.entrypoints: "websecure"
      traefik.http.routers.prometheus.rule: "Host(`${TRAEFIK_PROMETHEUS_HOST}`)"
      traefik.http.routers.prometheus.tls.certresolver: "myresolver"
      traefik.http.routers.prometheus.service: "prometheus"
      traefik.http.services.prometheus.loadbalancer.server.port: "9090"
      traefik.docker.network: "bridge"
      traefik.http.routers.prometheus.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    restart: "unless-stopped"

  ###### Prometheus node-exporter ######
  prometheus-node-exporter:
    image: prom/node-exporter:latest
    container_name: prometheus-node-exporter
    restart: unless-stopped
    environment:
      - "TZ=${TZ}"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    network_mode: "bridge"

  ###### Grafana ######
  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ${CONFIG_PATH}/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ${CONFIG_PATH}/grafana/config.monitoring
    network_mode: "bridge"
    environment:
      - "TZ=${TZ}"
    user: "472" # this means, that the username is admin
    labels:
      traefik.enable: "true"
      traefik.http.routers.grafana.entrypoints: "websecure"
      traefik.http.routers.grafana.rule: "Host(`${TRAEFIK_GRAFANA_HOST}`)"
      traefik.http.routers.grafana.tls.certresolver: "myresolver"
      traefik.http.routers.grafana.service: "grafana"
      traefik.http.services.grafana.loadbalancer.server.port: "3000"
      traefik.docker.network: "bridge"
    restart: unless-stopped

  ###### Portainer ######
  portainer:
    container_name: "portainer"
    image: "portainer/portainer-ce"
    network_mode: "bridge"
    ports:
      - "9000:9000/tcp"
    restart: "unless-stopped"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "portainer_data:/data"

  ###### Whoami ######
  whoami:
    container_name: "whoami"
    image: "containous/whoami:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.whoami.entrypoints: "websecure"
      traefik.http.routers.whoami.rule: "Host(`${TRAEFIK_WHOAMI_HOST}`)"
      traefik.http.routers.whoami.tls.certresolver: "myresolver"
      traefik.http.routers.whoami.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    restart: "unless-stopped"
    environment:
      - "TZ=${TZ}"

  ###### Samba ######
  samba:
    command:
      - "-n"
      - "-u"
      - "${SAMBA_USERNAME};${SAMBA_PASSWORD}"
      - "-s"
      - "shared;/rpi_shared;yes;no;no;admin;admin;admin"
      - "-s"
      - "docker_compose;/docker_compose;yes;no;no;admin;admin;admin"
      - "-s"
      - "rpi_brew;/rpi_brew;yes;no;no;admin;admin;admin"
      - "-p"
    container_name: "samba"
    image: "dperson/samba:latest"
    network_mode: "bridge"
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    restart: "unless-stopped"
    volumes:
      - "${HDD_PATH_SHARED}:/rpi_shared"
      - "/home/pi/rpi_brew:/rpi_brew" # TODO remove
      - "/home/pi/docker_compose:/docker_compose" # TODO remove

  ###### Minidlna ######
  minidlna:
    container_name: "minidlna"
    environment:
      - "MINIDLNA_MEDIA_DIR=/media"
      - "MINIDLNA_FRIENDLY_NAME=${MINIDLNA_FRIENDLY_NAME}"
    image: "vladgh/minidlna:latest"
    network_mode: "host"
    restart: "unless-stopped"
    volumes:
      - "${HDD_PATH_SHARED}:/media"

  ###### Wikijs ######
  wikijs:
    container_name: "wikijs"
    image: "linuxserver/wikijs:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.wikijs.entrypoints: "websecure"
      traefik.http.routers.wikijs.rule: "Host(`${TRAEFIK_WIKIJS_HOST}`)"
      traefik.http.routers.wikijs.tls.certresolver: "myresolver"
      traefik.http.routers.wikijs.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    ports:
      - "3100:3000/tcp"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/wikijs/data:/data"
      - "${CONFIG_PATH}/wikijs:/config"

  ###### Librespeed ######
  librespeed:
    container_name: "librespeed"
    image: "linuxserver/librespeed:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.librespeed.entrypoints: "websecure"
      traefik.http.routers.librespeed.rule: "Host(`${TRAEFIK_LIBRESPEED_HOST}`)"
      traefik.http.routers.librespeed.tls.certresolver: "myresolver"
      traefik.http.routers.librespeed.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    restart: "unless-stopped"

  ###### Fliebrowser ######
  filebrowser:
    container_name: "filebrowser"
    image: "hurlenko/filebrowser:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.filebrowser.entrypoints: "websecure"
      traefik.http.routers.filebrowser.rule: "Host(`${TRAEFIK_FILEBROWSER_HOST}`)"
      traefik.http.routers.filebrowser.tls.certresolver: "myresolver"
    network_mode: "bridge"
    ports:
      - "8081:8081/tcp"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/filebrowser:/config"
      - "${HDD_PATH_SHARED}:/data"

  ###### Jellyfin ######
  jellyfin:
    container_name: "jellyfin"
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: "linuxserver/jellyfin:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.jellyfin.entrypoints: "websecure"
      traefik.http.routers.jellyfin.rule: "Host(`${TRAEFIK_JELLYFIN_HOST}`)"
      traefik.http.routers.jellyfin.tls.certresolver: "myresolver"
    network_mode: "bridge"
    ports:
      - "8096:8096/tcp"
      - "8920:8920/tcp"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/jellyfin:/config"
      - "${JELLYFIN_CACHE}:/cache"
      - "${JELLYFIN_METADATA}/:/metadata"
      - "${JELLYFIN_TRANSCODE_CACHE}:/transcodes"
      - "${HDD_PATH_SHARED}:/shared_downloads"

  ###### Dokuwiki ######
  dokuwiki:
    container_name: "dokuwiki"
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
    image: "ghcr.io/linuxserver/dokuwiki:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.dokuwiki.entrypoints: "websecure"
      traefik.http.routers.dokuwiki.rule: "Host(`${TRAEFIK_DOKUWIKI_HOST}`)"
      traefik.http.routers.dokuwiki.tls.certresolver: "myresolver"
      traefik.http.routers.dokuwiki.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/dokuwiki:/config"

  ###### Dynu Updater ######
  dynu-updater:
    container_name: "dynu-updater"
    environment:
      - "TZ=${TZ}"
      - "USERNAME=${USERNAME}"
      - "PASSWORD=${PASSWORD}"
      - "HOSTNAMES=${HOSTNAMES}"
      - "REFRESH_TIME=${REFRESH_TIME}"
    image: "dokeraj/dynu-updater:latest"
    network_mode: "bridge"
    restart: "unless-stopped"
    ports:
      - "1050:1050"

#  ###### Duckdns ######
#  duckdns:
#    container_name: "duckdns"
#    environment:
#      - "PGID=${PGID}"
#      - "PUID=${PUID}"
#      - "TZ=${TZ}"
#      - "SUBDOMAINS=${SUBDOMAINS}"
#      - "TOKEN=${TOKEN}"
#    image: "linuxserver/duckdns:latest"
#    network_mode: "bridge"
#    restart: "unless-stopped"
#    volumes:
#      - "${CONFIG_PATH}/duckdns:/config"

  ###### Watchtower ######
  watchtower:
    container_name: "watchtower"
    environment:
      - "WATCHTOWER_CLEANUP=${WATCHTOWER_CLEANUP}"
      - "WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_POLL_INTERVAL}"
    image: "containrrr/watchtower:latest"
    network_mode: "bridge"
    restart: "unless-stopped"
    stdin_open: true
    tty: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  ###### Qbittorrent ######
  qbittorrent:
    container_name: "qbittorrent"
    environment:
      - "PGID=${PGID}"
      - "PUID=${PUID}"
      - "TZ=${TZ}"
      - "UMASK=022"
      - "WEBUI_PORT=${WEBUI_PORT}"
    image: "linuxserver/qbittorrent:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.qbittorrent.entrypoints: "websecure"
      traefik.http.routers.qbittorrent.rule: "Host(`${TRAEFIK_QBITTORRENT_HOST}`)"
      traefik.http.routers.qbittorrent.tls.certresolver: "myresolver"
    network_mode: "bridge"
    ports:
      - "5555:5555/tcp"
      - "6881:6881/tcp"
      - "6881:6881/udp"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/qbittorrent:/config"
      - "${HDD_PATH_SHARED}/downloads:/downloads"

  ###### Pihole ######
  pihole:
    container_name: "pihole"
    environment:
      - "TZ=${TZ}"
      - "WEBPASSWORD=${WEBPASSWORD}"
      - "DNSMASQ_USER=${DNSMASQ_USER}"
      - "VIRTUAL_HOST=${TRAEFIK_PIHOLE_HOST}"
    image: "pihole/pihole:latest"
    labels:
      traefik.enable: "true"
      traefik.http.middlewares.pihole-admin.addprefix.prefix: "/admin"
      traefik.http.routers.pihole.rule: "Host(`${TRAEFIK_PIHOLE_HOST}`)"
      traefik.http.routers.pihole.service: "pihole"
      traefik.http.routers.pihole.tls: "true"
      traefik.http.routers.pihole.tls.certresolver: "myresolver"
      traefik.http.routers.pihole_http.entrypoints: "web"
      traefik.http.routers.pihole_http.middlewares: "pihole-admin, auth"
      traefik.http.routers.pihole_http.rule: "Host(`${TRAEFIK_PIHOLE_HOST}`)"
      traefik.http.services.pihole.loadBalancer.server.port: "80"
      traefik.http.routers.pihole.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "88:80/tcp"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d"
      - "${CONFIG_PATH}/pihole/etc-pihole:/etc/pihole"

  ###### Heimdall ######
  heimdall:
    container_name: "heimdall"
    environment:
      - "TZ=${TZ}"
      - "PGID=1000"
      - "PUID=1000"
    image: "lscr.io/linuxserver/heimdall:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.heimdall.entrypoints: "websecure"
      traefik.http.routers.heimdall.rule: "Host(`${TRAEFIK_HEIMDALL_HOST}`)"
      traefik.http.routers.heimdall.tls.certresolver: "myresolver"
      traefik.http.routers.heimdall.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    network_mode: "bridge"
    restart: "unless-stopped"
    volumes:
      - "${CONFIG_PATH}/heimdall:/config"

  ###### Homepage ######
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    ports:
      - 3001:3000
    environment:
      - "TZ=${TZ}"
    labels:
      traefik.enable: "true"
      traefik.http.routers.homepage.entrypoints: "websecure"
      traefik.http.routers.homepage.rule: "Host(`${TRAEFIK_DEFAULT_HOST}`, `${TRAEFIK_HOMEPAGE_HOST}`)"
      traefik.http.routers.homepage.tls.certresolver: "myresolver"
      traefik.http.routers.homepage.middlewares: "auth"
      traefik.http.middlewares.auth.basicauth.users: ${ADMIN_USER}:${ADMIN_PASSWORD},${USER1}:${USER1_PASSWORD}
    volumes:
      - ${CONFIG_PATH}/homepage/:/app/config
      - ${HDD_PATH}/:/mnt/hdd:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    network_mode: "bridge"

  ###### Yacht ######
  yacht:
    container_name: "yacht"
    image: "selfhostedpro/yacht:latest"
    labels:
      traefik.enable: "true"
      traefik.http.routers.yacht.entrypoints: "websecure"
      traefik.http.routers.yacht.rule: "Host(`${TRAEFIK_YACHT_HOST}`)"
      traefik.http.routers.yacht.tls.certresolver: "myresolver"
    network_mode: "bridge"
    ports:
      - "8001:8000/tcp"
    restart: "unless-stopped"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "yacht:/config"

volumes:
  yacht:
    external: true
  portainer_data:
    external: true
  prometheus_data: {}
  grafana_data: {}